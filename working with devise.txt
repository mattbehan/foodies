working with devise

# devise comes wit the methods:
# current_user - returns the current user
# user_signed_in - same as authenticated?
#sign_in(@user) and sign_out(@user) - devise created methods that will either sign users in our out
# user_session - returns metadata... by and large DO NOT USE

seed using 
user = user.create()
user.confirm! <-- uses the devise method confirm


allowing users to sign in via email or password is complicated but shouldn't take long
for more info -->
https://github.com/plataformatec/devise/wiki/How-To:-Allow-users-to-sign-in-using-their-username-or-email-address

we allow unconfirmed access by toggling it in the initializer. it defaults to two months. This allows unconfirmed users to still login


overwrite after_inactive_sign_up_path_for in the devise controller to edit the default path
alternative would be to just set devise_for :users, controllers: { registrations: "reg`istrations" } in routes.rb, then overwriting the method in my own registrationscontroller that inherited from devisecontroller, however that never responded to any changes
update- fix was to say registrationsController <Devise::RegistrationsController and not DeviseController
it still responds to after_sign_up_path_for and not after_inactive_sign_up_path_for, probably because they are allowed to use the site for 7 days as I set it in config

when we want to push to production all we will have to do is set the environment variables for sendgrid username and password using-
heroku config:set SENDGRID_USERNAME

________________
DEVISE INVITABLE

route for sending an invitation is users/invitation/new-- set a before_filter on that

had to copy invitations controller which lets me override the default devise mailer so I can use my custom methods in my InviteMailer model.

Created custom views in views/invite_mailer/reviewer_invitation_instructions and views/invite_mailer/user_invitation_instructions so I can customize the messages

copied in notification mailer in order to create absolutely custom messages... e.g. the user would be able to say "hey! whats up remember when I met you five days ago! This is actually a personalized message!" ... doesn't look like this was actually necessary

I think this all would have been a lot easier if I had just passed in the params for the user to be a certain type of admin in attributes... then all I would have to do is say invite!({attributes})